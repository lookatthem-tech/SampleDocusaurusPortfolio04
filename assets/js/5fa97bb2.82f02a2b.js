"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[6389],{3905:(e,t,a)=>{a.d(t,{Zo:()=>r,kt:()=>u});var s=a(7294);function l(e,t,a){return t in e?Object.defineProperty(e,t,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[t]=a,e}function d(e,t){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);t&&(s=s.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),a.push.apply(a,s)}return a}function n(e){for(var t=1;t<arguments.length;t++){var a=null!=arguments[t]?arguments[t]:{};t%2?d(Object(a),!0).forEach((function(t){l(e,t,a[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):d(Object(a)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(a,t))}))}return e}function i(e,t){if(null==e)return{};var a,s,l=function(e,t){if(null==e)return{};var a,s,l={},d=Object.keys(e);for(s=0;s<d.length;s++)a=d[s],t.indexOf(a)>=0||(l[a]=e[a]);return l}(e,t);if(Object.getOwnPropertySymbols){var d=Object.getOwnPropertySymbols(e);for(s=0;s<d.length;s++)a=d[s],t.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(l[a]=e[a])}return l}var c=s.createContext({}),o=function(e){var t=s.useContext(c),a=t;return e&&(a="function"==typeof e?e(t):n(n({},t),e)),a},r=function(e){var t=o(e.components);return s.createElement(c.Provider,{value:t},e.children)},p="mdxType",k={inlineCode:"code",wrapper:function(e){var t=e.children;return s.createElement(s.Fragment,{},t)}},h=s.forwardRef((function(e,t){var a=e.components,l=e.mdxType,d=e.originalType,c=e.parentName,r=i(e,["components","mdxType","originalType","parentName"]),p=o(a),h=l,u=p["".concat(c,".").concat(h)]||p[h]||k[h]||d;return a?s.createElement(u,n(n({ref:t},r),{},{components:a})):s.createElement(u,n({ref:t},r))}));function u(e,t){var a=arguments,l=t&&t.mdxType;if("string"==typeof e||l){var d=a.length,n=new Array(d);n[0]=h;var i={};for(var c in t)hasOwnProperty.call(t,c)&&(i[c]=t[c]);i.originalType=e,i[p]="string"==typeof e?e:l,n[1]=i;for(var o=2;o<d;o++)n[o]=a[o];return s.createElement.apply(null,n)}return s.createElement.apply(null,a)}h.displayName="MDXCreateElement"},593:(e,t,a)=>{a.r(t),a.d(t,{assets:()=>c,contentTitle:()=>n,default:()=>k,frontMatter:()=>d,metadata:()=>i,toc:()=>o});var s=a(7462),l=(a(7294),a(3905));const d={},n="Swagger Petstore Sample",i={unversionedId:"intro001",id:"intro001",title:"Swagger Petstore Sample",description:"This is a sample Petstore server.",source:"@site/docs/intro001.mdx",sourceDirName:".",slug:"/intro001",permalink:"/lookatthem-tech.github.io/docs/intro001",draft:!1,editUrl:"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/docs/intro001.mdx",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Refresh and Access Token Overview",permalink:"/lookatthem-tech.github.io/docs/ApiTwoCol"}},c={},o=[],r={toc:o},p="wrapper";function k(e){let{components:t,...a}=e;return(0,l.kt)(p,(0,s.Z)({},r,a,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"swagger-petstore-sample"},"Swagger Petstore Sample"),(0,l.kt)("div",{class:"app-desc"},(0,l.kt)("p",null,"This is a sample Petstore server."),(0,l.kt)("p",null,(0,l.kt)("a",{href:"http://swagger.io"},"Learn about Swagger")," or join the IRC channel ",(0,l.kt)("code",null,"#swagger")," on irc.freenode.net."),(0,l.kt)("p",null,"For this sample, you can use the api key ",(0,l.kt)("code",null,"special-key")," to test the authorization filters.")),(0,l.kt)("h2",null,"Access"),(0,l.kt)("ol",null,(0,l.kt)("li",{value:"1"},"APIKey KeyParamName:api_key KeyInQuery:false KeyInHeader:true"),(0,l.kt)("li",{value:"2"},"OAuth AuthorizationUrl:http://petstore.swagger.io/api/oauth/dialogTokenUrl:")),(0,l.kt)("h2",null,(0,l.kt)("a",{name:"__Methods"}),"Methods")," [ Jump to ",(0,l.kt)("a",{href:"#__Models"},"Models")," ] ",(0,l.kt)("h1",null,(0,l.kt)("a",{name:"Pet"}),"Pet"),(0,l.kt)("div",{class:"method"},(0,l.kt)("a",{name:"addPet"}),(0,l.kt)("div",{class:"method-path"},(0,l.kt)("a",{class:"up",href:"#__Methods"},"Up"),(0,l.kt)("pre",{class:"post"},(0,l.kt)("code",{class:"huge"},(0,l.kt)("span",{class:"http-method"},"post")," /pets"))),(0,l.kt)("div",{class:"method-summary"},"Add a new pet to the store ( ",(0,l.kt)("span",{class:"nickname"},"addPet"),") "),(0,l.kt)("div",{class:"method-notes"}),(0,l.kt)("h3",{class:"field-label"},"Consumes")," This API call consumes the following media types via the ",(0,l.kt)("span",{class:"heaader"},"Content-Type")," request header: ",(0,l.kt)("ul",null,(0,l.kt)("li",{value:"1"},(0,l.kt)("code",null,"application/json")),(0,l.kt)("li",{value:"2"},(0,l.kt)("code",null,"application/xml"))),(0,l.kt)("h3",{class:"field-label"},"Request body"),(0,l.kt)("div",{class:"field-items"},(0,l.kt)("div",{class:"param"},"body ",(0,l.kt)("a",{href:"#body_1"},"body_1")," (optional) "),(0,l.kt)("div",{class:"param-desc"},(0,l.kt)("span",{class:"param-type"},"Body Parameter")," \u2014 Pet object that needs to be added to the store")),(0,l.kt)("h3",{class:"field-label"},"Produces")," This API call produces the following media types according to the ",(0,l.kt)("span",{class:"header"},"Accept")," request header; the media type will be conveyed by the ",(0,l.kt)("span",{class:"heaader"},"Content-Type")," response header. ",(0,l.kt)("ul",null,(0,l.kt)("li",{value:"1"},(0,l.kt)("code",null,"application/json")),(0,l.kt)("li",{value:"2"},(0,l.kt)("code",null,"application/xml"))),(0,l.kt)("h3",{class:"field-label"},"Responses"),(0,l.kt)("h4",{class:"field-label"},"405")," Invalid input ",(0,l.kt)("a",{href:"#"})),(0,l.kt)("hr",{color:"#dddddd",width:"100%",size:"0",align:"center"}),(0,l.kt)("div",{class:"method"},(0,l.kt)("a",{name:"deletePet"}),(0,l.kt)("div",{class:"method-path"},(0,l.kt)("a",{class:"up",href:"#__Methods"},"Up"),(0,l.kt)("pre",{class:"delete"},(0,l.kt)("code",{class:"huge"},(0,l.kt)("span",{class:"http-method"},"delete")," /pets/petId"))),(0,l.kt)("div",{class:"method-summary"},"Deletes a pet ( ",(0,l.kt)("span",{class:"nickname"},"deletePet"),") "),(0,l.kt)("div",{class:"method-notes"}),(0,l.kt)("h3",{class:"field-label"},"Path parameters"),(0,l.kt)("div",{class:"field-items"},(0,l.kt)("div",{class:"param"},"petId (required)"),(0,l.kt)("div",{class:"param-desc"},(0,l.kt)("span",{class:"param-type"},"Path Parameter")," \u2014 Pet id to delete format: int64")),(0,l.kt)("h3",{class:"field-label"},"Request headers"),(0,l.kt)("div",{class:"field-items"}),(0,l.kt)("h3",{class:"field-label"},"Produces")," This API call produces the following media types according to the ",(0,l.kt)("span",{class:"header"},"Accept")," request header; the media type will be conveyed by the ",(0,l.kt)("span",{class:"heaader"},"Content-Type")," response header. ",(0,l.kt)("ul",null,(0,l.kt)("li",{value:"1"},(0,l.kt)("code",null,"application/json")),(0,l.kt)("li",{value:"2"},(0,l.kt)("code",null,"application/xml"))),(0,l.kt)("h3",{class:"field-label"},"Responses"),(0,l.kt)("h4",{class:"field-label"},"400")," Invalid pet value ",(0,l.kt)("a",{href:"#"})),(0,l.kt)("hr",{color:"#dddddd",width:"100%",size:"0",align:"center"}),(0,l.kt)("div",{class:"method"},(0,l.kt)("a",{name:"findPetsByStatus"}),(0,l.kt)("div",{class:"method-path"},(0,l.kt)("a",{class:"up",href:"#__Methods"},"Up"),(0,l.kt)("pre",{class:"get"},(0,l.kt)("code",{class:"huge"},(0,l.kt)("span",{class:"http-method"},"get")," /pets/findByStatus"))),(0,l.kt)("div",{class:"method-summary"},"Finds Pets by status ( ",(0,l.kt)("span",{class:"nickname"},"findPetsByStatus"),") "),(0,l.kt)("div",{class:"method-notes"},"Multiple status values can be provided with comma seperated strings"),(0,l.kt)("h3",{class:"field-label"},"Query parameters"),(0,l.kt)("div",{class:"field-items"},(0,l.kt)("div",{class:"param"},"status (optional)"),(0,l.kt)("div",{class:"param-desc"},(0,l.kt)("span",{class:"param-type"},"Query Parameter")," \u2014 Status values that need to be considered for filter")),(0,l.kt)("h3",{class:"field-label"},"Example data"),(0,l.kt)("div",{class:"example-data-content-type"},"Content-Type: application/xml"),(0,l.kt)("pre",{class:"example"},(0,l.kt)("div",{class:"code"},(0,l.kt)("p",null,"123456789"),(0,l.kt)("p",null,"doggie"),(0,l.kt)("p",null,"aeiou"),(0,l.kt)("p",null,"aeiou"))),(0,l.kt)("h3",{class:"field-label"},"Produces")," This API call produces the following media types according to the ",(0,l.kt)("span",{class:"header"},"Accept")," request header; the media type will be conveyed by the ",(0,l.kt)("span",{class:"heaader"},"Content-Type")," response header. ",(0,l.kt)("ul",null,(0,l.kt)("li",{value:"1"},(0,l.kt)("code",null,"application/json")),(0,l.kt)("li",{value:"2"},(0,l.kt)("code",null,"application/xml"))),(0,l.kt)("h3",{class:"field-label"},"Responses"),(0,l.kt)("h4",{class:"field-label"},"200")," successful operation ",(0,l.kt)("h4",{class:"field-label"},"400")," Invalid status value ",(0,l.kt)("a",{href:"#"})),(0,l.kt)("hr",{color:"#dddddd",width:"100%",size:"0",align:"center"}),(0,l.kt)("div",{class:"method"},(0,l.kt)("a",{name:"findPetsByTags"}),(0,l.kt)("div",{class:"method-path"},(0,l.kt)("a",{class:"up",href:"#__Methods"},"Up"),(0,l.kt)("pre",{class:"get"},(0,l.kt)("code",{class:"huge"},(0,l.kt)("span",{class:"http-method"},"get")," /pets/findByTags"))),(0,l.kt)("div",{class:"method-summary"},"Finds Pets by tags ( ",(0,l.kt)("span",{class:"nickname"},"findPetsByTags"),") "),(0,l.kt)("div",{class:"method-notes"},"Muliple tags can be provided with comma seperated strings. Use tag1, tag2, tag3 for testing."),(0,l.kt)("h3",{class:"field-label"},"Query parameters"),(0,l.kt)("div",{class:"field-items"},(0,l.kt)("div",{class:"param"},"tags (optional)"),(0,l.kt)("div",{class:"param-desc"},(0,l.kt)("span",{class:"param-type"},"Query Parameter")," \u2014 Tags to filter by")),(0,l.kt)("h3",{class:"field-label"},"Return type"),(0,l.kt)("div",{class:"return-type"}," array[ ",(0,l.kt)("a",{href:"#inline_response_200"},"inline_response_200"),"] "),(0,l.kt)("h3",{class:"field-label"},"Example data"),(0,l.kt)("div",{class:"example-data-content-type"},"Content-Type: application/json"),(0,l.kt)("pre",{class:"example"},(0,l.kt)("div",{class:"code"},(0,l.kt)("p",null,'"photoUrls" : [ "aeiou" ],'),(0,l.kt)("p",null,'"name" : "doggie",'),(0,l.kt)("p",null,'"id" : 0,'),(0,l.kt)("p",null,'"name" : "aeiou",'),(0,l.kt)("p",null,'"id" : 6'),(0,l.kt)("p",null,"},"),(0,l.kt)("p",null,'"tags" : [ "" ],'),(0,l.kt)("p",null,'"status" : "aeiou"'),(0,l.kt)("p",null,"} ]"))),(0,l.kt)("h3",{class:"field-label"},"Example data"),(0,l.kt)("div",{class:"example-data-content-type"},"Content-Type: application/xml"),(0,l.kt)("pre",{class:"example"},(0,l.kt)("div",{class:"code"},(0,l.kt)("p",null,"123456789"),(0,l.kt)("p",null,"doggie"),(0,l.kt)("p",null,"aeiou"),(0,l.kt)("p",null,"aeiou"))),(0,l.kt)("h3",{class:"field-label"},"Produces")," This API call produces the following media types according to the ",(0,l.kt)("span",{class:"header"},"Accept")," request header; the media type will be conveyed by the ",(0,l.kt)("span",{class:"heaader"},"Content-Type")," response header. ",(0,l.kt)("ul",null,(0,l.kt)("li",{value:"1"},(0,l.kt)("code",null,"application/json")),(0,l.kt)("li",{value:"2"},(0,l.kt)("code",null,"application/xml"))),(0,l.kt)("h3",{class:"field-label"},"Responses"),(0,l.kt)("h4",{class:"field-label"},"200")," successful operation ",(0,l.kt)("h4",{class:"field-label"},"400")," Invalid tag value ",(0,l.kt)("a",{href:"#"})),(0,l.kt)("hr",{color:"#dddddd",width:"100%",size:"0",align:"center"}),(0,l.kt)("div",{class:"method"},(0,l.kt)("a",{name:"getPetById"}),(0,l.kt)("div",{class:"method-path"},(0,l.kt)("a",{class:"up",href:"#__Methods"},"Up")),(0,l.kt)("div",{class:"method-summary"},"Find pet by ID ( ",(0,l.kt)("span",{class:"nickname"},"getPetById"),") "),(0,l.kt)("div",{class:"method-notes"},"Returns a pet when ID < 10. ID > 10 or nonintegers will simulate API error conditions"),(0,l.kt)("h3",{class:"field-label"},"Path parameters"),(0,l.kt)("div",{class:"field-items"},(0,l.kt)("div",{class:"param"},"petId (required)"),(0,l.kt)("div",{class:"param-desc"},(0,l.kt)("span",{class:"param-type"},"Path Parameter")," \u2014 ID of pet that needs to be fetched format: int64")),(0,l.kt)("h3",{class:"field-label"},"Return type"),(0,l.kt)("div",{class:"return-type"},(0,l.kt)("a",{href:"#inline_response_200"},"inline_response_200")),(0,l.kt)("h3",{class:"field-label"},"Example data"),(0,l.kt)("div",{class:"example-data-content-type"},"Content-Type: application/json"),(0,l.kt)("pre",{class:"example"},(0,l.kt)("div",{class:"code"},(0,l.kt)("p",null,'"photoUrls" : [ "aeiou" ],'),(0,l.kt)("p",null,'"name" : "doggie",'),(0,l.kt)("p",null,'"id" : 0,'),(0,l.kt)("p",null,'"name" : "aeiou",'),(0,l.kt)("p",null,'"id" : 6'),(0,l.kt)("p",null,"},"),(0,l.kt)("p",null,'"tags" : [ "" ],'),(0,l.kt)("p",null,'"status" : "aeiou"'),(0,l.kt)("p",null,"}"))),(0,l.kt)("h3",{class:"field-label"},"Example data"),(0,l.kt)("div",{class:"example-data-content-type"},"Content-Type: application/xml"),(0,l.kt)("pre",{class:"example"},(0,l.kt)("div",{class:"code"},(0,l.kt)("p",null,"123456789"),(0,l.kt)("p",null,"doggie"),(0,l.kt)("p",null,"aeiou"),(0,l.kt)("p",null,"aeiou"))),(0,l.kt)("h3",{class:"field-label"},"Produces")," This API call produces the following media types according to the ",(0,l.kt)("span",{class:"header"},"Accept")," request header; the media type will be conveyed by the ",(0,l.kt)("span",{class:"heaader"},"Content-Type")," response header. ",(0,l.kt)("ul",null,(0,l.kt)("li",{value:"1"},(0,l.kt)("code",null,"application/json")),(0,l.kt)("li",{value:"2"},(0,l.kt)("code",null,"application/xml"))),(0,l.kt)("h3",{class:"field-label"},"Responses"),(0,l.kt)("h4",{class:"field-label"},"200")," successful operation ",(0,l.kt)("a",{href:"#inline_response_200"},"inline_response_200"),(0,l.kt)("h4",{class:"field-label"},"400")," Invalid ID supplied ",(0,l.kt)("a",{href:"#"}),(0,l.kt)("h4",{class:"field-label"},"404")," Pet not found ",(0,l.kt)("a",{href:"#"})),(0,l.kt)("hr",{color:"#dddddd",width:"100%",size:"0",align:"center"}),(0,l.kt)("div",{class:"method"},(0,l.kt)("a",{name:"updatePet"}),(0,l.kt)("div",{class:"method-path"},(0,l.kt)("a",{class:"up",href:"#__Methods"},"Up"),(0,l.kt)("pre",{class:"put"},(0,l.kt)("code",{class:"huge"},(0,l.kt)("span",{class:"http-method"},"put")," /pets"))),(0,l.kt)("div",{class:"method-summary"},"Update an existing pet ( ",(0,l.kt)("span",{class:"nickname"},"updatePet"),") "),(0,l.kt)("div",{class:"method-notes"}),(0,l.kt)("h3",{class:"field-label"},"Consumes")," This API call consumes the following media types via the ",(0,l.kt)("span",{class:"heaader"},"Content-Type")," request header: ",(0,l.kt)("ul",null,(0,l.kt)("li",{value:"1"},(0,l.kt)("code",null,"application/json")),(0,l.kt)("li",{value:"2"},(0,l.kt)("code",null,"application/xml"))),(0,l.kt)("h3",{class:"field-label"},"Request body"),(0,l.kt)("div",{class:"field-items"},(0,l.kt)("div",{class:"param"},"body ",(0,l.kt)("a",{href:"#body"},"body")," (optional) "),(0,l.kt)("div",{class:"param-desc"},(0,l.kt)("span",{class:"param-type"},"Body Parameter")," \u2014 Pet object that needs to be added to the store")),(0,l.kt)("h3",{class:"field-label"},"Produces")," This API call produces the following media types according to the ",(0,l.kt)("span",{class:"header"},"Accept")," request header; the media type will be conveyed by the ",(0,l.kt)("span",{class:"heaader"},"Content-Type")," response header. ",(0,l.kt)("ul",null,(0,l.kt)("li",{value:"1"},(0,l.kt)("code",null,"application/json")),(0,l.kt)("li",{value:"2"},(0,l.kt)("code",null,"application/xml"))),(0,l.kt)("h3",{class:"field-label"},"Responses"),(0,l.kt)("h4",{class:"field-label"},"400")," Invalid ID supplied ",(0,l.kt)("a",{href:"#"}),(0,l.kt)("h4",{class:"field-label"},"404")," Pet not found ",(0,l.kt)("a",{href:"#"}),(0,l.kt)("h4",{class:"field-label"},"405")," Validation exception ",(0,l.kt)("a",{href:"#"})),(0,l.kt)("hr",{color:"#dddddd",width:"100%",size:"0",align:"center"}),(0,l.kt)("div",{class:"method"},(0,l.kt)("a",{name:"updatePetWithForm"}),(0,l.kt)("div",{class:"method-path"},(0,l.kt)("a",{class:"up",href:"#__Methods"},"Up"),(0,l.kt)("pre",{class:"post"},(0,l.kt)("code",{class:"huge"},(0,l.kt)("span",{class:"http-method"},"post")," /pets/petId"))),(0,l.kt)("div",{class:"method-summary"},"Updates a pet in the store with form data ( ",(0,l.kt)("span",{class:"nickname"},"updatePetWithForm"),") "),(0,l.kt)("div",{class:"method-notes"}),(0,l.kt)("h3",{class:"field-label"},"Path parameters"),(0,l.kt)("div",{class:"field-items"},(0,l.kt)("div",{class:"param"},"petId (required)"),(0,l.kt)("div",{class:"param-desc"},(0,l.kt)("span",{class:"param-type"},"Path Parameter")," \u2014 ID of pet that needs to be updated")),(0,l.kt)("h3",{class:"field-label"},"Consumes")," This API call consumes the following media types via the ",(0,l.kt)("span",{class:"heaader"},"Content-Type")," request header: ",(0,l.kt)("ul",null,(0,l.kt)("li",{value:"1"},(0,l.kt)("code",null,"application/x-www-form-urlencoded"))),(0,l.kt)("h3",{class:"field-label"},"Form parameters"),(0,l.kt)("div",{class:"field-items"},(0,l.kt)("div",{class:"param"},"name (required)"),(0,l.kt)("div",{class:"param-desc"},(0,l.kt)("span",{class:"param-type"},"Form Parameter")," \u2014 Updated name of the pet"),(0,l.kt)("div",{class:"param"},"status (required)"),(0,l.kt)("div",{class:"param-desc"},(0,l.kt)("span",{class:"param-type"},"Form Parameter")," \u2014 Updated status of the pet")),(0,l.kt)("h3",{class:"field-label"},"Produces")," This API call produces the following media types according to the ",(0,l.kt)("span",{class:"header"},"Accept")," request header; the media type will be conveyed by the ",(0,l.kt)("span",{class:"heaader"},"Content-Type")," response header. ",(0,l.kt)("ul",null,(0,l.kt)("li",{value:"1"},(0,l.kt)("code",null,"application/json")),(0,l.kt)("li",{value:"2"},(0,l.kt)("code",null,"application/xml"))),(0,l.kt)("h3",{class:"field-label"},"Responses"),(0,l.kt)("h4",{class:"field-label"},"405")," Invalid input ",(0,l.kt)("a",{href:"#"})),(0,l.kt)("hr",{color:"#dddddd",width:"100%",size:"0",align:"center"}),(0,l.kt)("h1",null,(0,l.kt)("a",{name:"Store"}),"Store"),(0,l.kt)("div",{class:"method"},(0,l.kt)("a",{name:"deleteOrder"}),(0,l.kt)("div",{class:"method-path"},(0,l.kt)("a",{class:"up",href:"#__Methods"},"Up"),(0,l.kt)("pre",{class:"delete"},(0,l.kt)("code",{class:"huge"},(0,l.kt)("span",{class:"http-method"},"delete")," /stores/order/orderId"))),(0,l.kt)("div",{class:"method-summary"},"Delete purchase order by ID ( ",(0,l.kt)("span",{class:"nickname"},"deleteOrder"),") "),(0,l.kt)("div",{class:"method-notes"},"For valid response try integer IDs with value < 1000. Anything above 1000 or nonintegers will generate API errors"),(0,l.kt)("h3",{class:"field-label"},"Path parameters"),(0,l.kt)("div",{class:"field-items"},(0,l.kt)("div",{class:"param"},"orderId (required)"),(0,l.kt)("div",{class:"param-desc"},(0,l.kt)("span",{class:"param-type"},"Path Parameter")," \u2014 ID of the order that needs to be deleted")),(0,l.kt)("h3",{class:"field-label"},"Produces")," This API call produces the following media types according to the ",(0,l.kt)("span",{class:"header"},"Accept")," request header; the media type will be conveyed by the ",(0,l.kt)("span",{class:"heaader"},"Content-Type")," response header. ",(0,l.kt)("ul",null,(0,l.kt)("li",{value:"1"},(0,l.kt)("code",null,"application/json")),(0,l.kt)("li",{value:"2"},(0,l.kt)("code",null,"application/xml"))),(0,l.kt)("h3",{class:"field-label"},"Responses"),(0,l.kt)("h4",{class:"field-label"},"400")," Invalid ID supplied ",(0,l.kt)("a",{href:"#"}),(0,l.kt)("h4",{class:"field-label"},"404")," Order not found ",(0,l.kt)("a",{href:"#"})),(0,l.kt)("hr",{color:"#dddddd",width:"100%",size:"0",align:"center"}),(0,l.kt)("div",{class:"method"},(0,l.kt)("a",{name:"getOrderById"}),(0,l.kt)("div",{class:"method-path"},(0,l.kt)("a",{class:"up",href:"#__Methods"},"Up"),(0,l.kt)("pre",{class:"get"},(0,l.kt)("code",{class:"huge"},(0,l.kt)("span",{class:"http-method"},"get")," /stores/order/orderId"))),(0,l.kt)("div",{class:"method-summary"},"Find purchase order by ID ( ",(0,l.kt)("span",{class:"nickname"},"getOrderById"),") "),(0,l.kt)("div",{class:"method-notes"},"For valid response try integer IDs with value <= 5 or > 10. Other values will generated exceptions"),(0,l.kt)("h3",{class:"field-label"},"Path parameters"),(0,l.kt)("div",{class:"field-items"},(0,l.kt)("div",{class:"param"},"orderId (required)"),(0,l.kt)("div",{class:"param-desc"},(0,l.kt)("span",{class:"param-type"},"Path Parameter")," \u2014 ID of pet that needs to be fetched")),(0,l.kt)("h3",{class:"field-label"},"Return type"),(0,l.kt)("div",{class:"return-type"},(0,l.kt)("a",{href:"#inline_response_200_1"},"inline_response_200_1")),(0,l.kt)("h3",{class:"field-label"},"Example data"),(0,l.kt)("div",{class:"example-data-content-type"},"Content-Type: application/json"),(0,l.kt)("pre",{class:"example"},(0,l.kt)("div",{class:"code"},(0,l.kt)("p",null,'"petId" : 6,'),(0,l.kt)("p",null,'"quantity" : 1,'),(0,l.kt)("p",null,'"id" : 0,'),(0,l.kt)("p",null,'"shipDate" : "2000-01-23T04:56:07.000+00:00",'),(0,l.kt)("p",null,'"complete" : true,'),(0,l.kt)("p",null,'"status" : "aeiou"'),(0,l.kt)("p",null,"}"))),(0,l.kt)("h3",{class:"field-label"},"Example data"),(0,l.kt)("div",{class:"example-data-content-type"},"Content-Type: application/xml"),(0,l.kt)("pre",{class:"example"},(0,l.kt)("div",{class:"code"},(0,l.kt)("p",null,"123456789"),(0,l.kt)("p",null,"123456789"),(0,l.kt)("p",null,"123"),(0,l.kt)("p",null,"2000-01-23T04:56:07.000Z"),(0,l.kt)("p",null,"aeiou"),(0,l.kt)("p",null,"true"))),(0,l.kt)("h3",{class:"field-label"},"Produces")," This API call produces the following media types according to the ",(0,l.kt)("span",{class:"header"},"Accept")," request header; the media type will be conveyed by the ",(0,l.kt)("span",{class:"heaader"},"Content-Type")," response header. ",(0,l.kt)("ul",null,(0,l.kt)("li",null,(0,l.kt)("code",null,"application/json")),(0,l.kt)("li",null,(0,l.kt)("code",null,"application/xml"))),(0,l.kt)("h3",{class:"field-label"},"Responses"),(0,l.kt)("h4",{class:"field-label"},"200")," successful operation ",(0,l.kt)("a",{href:"#inline_response_200_1"},"inline_response_200_1"),(0,l.kt)("h4",{class:"field-label"},"400")," Invalid ID supplied ",(0,l.kt)("a",{href:"#"}),(0,l.kt)("h4",{class:"field-label"},"404")," Order not found ",(0,l.kt)("a",{href:"#"})),(0,l.kt)("hr",{color:"#dddddd",width:"100%",size:"0",align:"center"}),(0,l.kt)("div",{class:"method"},(0,l.kt)("a",{name:"placeOrder"}),(0,l.kt)("div",{class:"method-path"},(0,l.kt)("a",{class:"up",href:"#__Methods"},"Up"),(0,l.kt)("pre",{class:"post"},(0,l.kt)("code",{class:"huge"},(0,l.kt)("span",{class:"http-method"},"post")," /stores/order"))),(0,l.kt)("div",{class:"method-summary"},"Place an order for a pet ( ",(0,l.kt)("span",{class:"nickname"},"placeOrder"),") "),(0,l.kt)("div",{class:"method-notes"}),(0,l.kt)("h3",{class:"field-label"},"Request body"),(0,l.kt)("div",{class:"field-items"},(0,l.kt)("div",{class:"param"},"body ",(0,l.kt)("a",{href:"#body_2"},"body_2")," (optional) "),(0,l.kt)("div",{class:"param-desc"},(0,l.kt)("span",{class:"param-type"},"Body Parameter")," \u2014 order placed for purchasing the pet")),(0,l.kt)("h3",{class:"field-label"},"Return type"),(0,l.kt)("div",{class:"return-type"},(0,l.kt)("a",{href:"#inline_response_200_1"},"inline_response_200_1")),(0,l.kt)("h3",{class:"field-label"},"Example data"),(0,l.kt)("div",{class:"example-data-content-type"},"Content-Type: application/json"),(0,l.kt)("pre",{class:"example"},(0,l.kt)("div",{class:"code"},(0,l.kt)("p",null,'"petId" : 6,'),(0,l.kt)("p",null,'"quantity" : 1,'),(0,l.kt)("p",null,'"id" : 0,'),(0,l.kt)("p",null,'"shipDate" : "2000-01-23T04:56:07.000+00:00",'),(0,l.kt)("p",null,'"complete" : true,'),(0,l.kt)("p",null,'"status" : "aeiou"'),(0,l.kt)("p",null,"}"))),(0,l.kt)("h3",{class:"field-label"},"Example data"),(0,l.kt)("div",{class:"example-data-content-type"},"Content-Type: application/xml"),(0,l.kt)("pre",{class:"example"},(0,l.kt)("div",{class:"code"},(0,l.kt)("p",null,"123456789"),(0,l.kt)("p",null,"123456789"),(0,l.kt)("p",null,"123"),(0,l.kt)("p",null,"2000-01-23T04:56:07.000Z"),(0,l.kt)("p",null,"aeiou"),(0,l.kt)("p",null,"true"))),(0,l.kt)("h3",{class:"field-label"},"Produces")," This API call produces the following media types according to the ",(0,l.kt)("span",{class:"header"},"Accept")," request header; the media type will be conveyed by the ",(0,l.kt)("span",{class:"heaader"},"Content-Type")," response header. ",(0,l.kt)("ul",null,(0,l.kt)("li",{value:"1"},(0,l.kt)("code",null,"application/json")),(0,l.kt)("li",{value:"2"},(0,l.kt)("code",null,"application/xml"))),(0,l.kt)("h3",{class:"field-label"},"Responses"),(0,l.kt)("h4",{class:"field-label"},"200")," successful operation ",(0,l.kt)("a",{href:"#inline_response_200_1"},"inline_response_200_1"),(0,l.kt)("h4",{class:"field-label"},"400")," Invalid Order ",(0,l.kt)("a",{href:"#"})),(0,l.kt)("hr",{color:"#dddddd",width:"100%",size:"0",align:"center"}),(0,l.kt)("h1",null,(0,l.kt)("a",{name:"User"}),"User"),(0,l.kt)("div",{class:"method"},(0,l.kt)("a",{name:"createUser"}),(0,l.kt)("div",{class:"method-path"},(0,l.kt)("a",{class:"up",href:"#__Methods"},"Up"),(0,l.kt)("pre",{class:"post"},(0,l.kt)("code",{class:"huge"},(0,l.kt)("span",{class:"http-method"},"post")," /users"))),(0,l.kt)("div",{class:"method-summary"},"Create user ( ",(0,l.kt)("span",{class:"nickname"},"createUser"),") "),(0,l.kt)("div",{class:"method-notes"},"This can only be done by the logged in user."),(0,l.kt)("h3",{class:"field-label"},"Request body"),(0,l.kt)("div",{class:"field-items"},(0,l.kt)("div",{class:"param"},"body ",(0,l.kt)("a",{href:"#body_3"},"body_3")," (optional) "),(0,l.kt)("div",{class:"param-desc"},(0,l.kt)("span",{class:"param-type"},"Body Parameter")," \u2014 Created user object")),(0,l.kt)("h3",{class:"field-label"},"Produces")," This API call produces the following media types according to the ",(0,l.kt)("span",{class:"header"},"Accept")," request header; the media type will be conveyed by the ",(0,l.kt)("span",{class:"heaader"},"Content-Type")," response header. ",(0,l.kt)("ul",null,(0,l.kt)("li",{value:"1"},(0,l.kt)("code",null,"application/json")),(0,l.kt)("li",{value:"2"},(0,l.kt)("code",null,"application/xml"))),(0,l.kt)("h3",{class:"field-label"},"Responses"),(0,l.kt)("h4",{class:"field-label"},"default")," successful operation ",(0,l.kt)("a",{href:"#"})),(0,l.kt)("hr",{color:"#dddddd",width:"100%",size:"0",align:"center"}),(0,l.kt)("div",{class:"method"},(0,l.kt)("a",{name:"createUsersWithArrayInput"}),(0,l.kt)("div",{class:"method-path"},(0,l.kt)("a",{class:"up",href:"#__Methods"},"Up"),(0,l.kt)("pre",{class:"post"},(0,l.kt)("code",{class:"huge"},(0,l.kt)("span",{class:"http-method"},"post")," /users/createWithArray"))),(0,l.kt)("div",{class:"method-summary"},"Creates list of users with given input array ( ",(0,l.kt)("span",{class:"nickname"},"createUsersWithArrayInput"),") "),(0,l.kt)("div",{class:"method-notes"}),(0,l.kt)("h3",{class:"field-label"},"Request body"),(0,l.kt)("div",{class:"field-items"},(0,l.kt)("div",{class:"param"},"body ",(0,l.kt)("a",{href:"#body_4"},"body_4")," (optional) "),(0,l.kt)("div",{class:"param-desc"},(0,l.kt)("span",{class:"param-type"},"Body Parameter")," \u2014 List of user object")),(0,l.kt)("h3",{class:"field-label"},"Produces")," This API call produces the following media types according to the ",(0,l.kt)("span",{class:"header"},"Accept")," request header; the media type will be conveyed by the ",(0,l.kt)("span",{class:"heaader"},"Content-Type")," response header. ",(0,l.kt)("ul",null,(0,l.kt)("li",{value:"1"},(0,l.kt)("code",null,"application/json")),(0,l.kt)("li",{value:"2"},(0,l.kt)("code",null,"application/xml"))),(0,l.kt)("h3",{class:"field-label"},"Responses"),(0,l.kt)("h4",{class:"field-label"},"default")," successful operation ",(0,l.kt)("a",{href:"#"})),(0,l.kt)("hr",{color:"#dddddd",width:"100%",size:"0",align:"center"}),(0,l.kt)("div",{class:"method"},(0,l.kt)("a",{name:"createUsersWithListInput"}),(0,l.kt)("div",{class:"method-path"},(0,l.kt)("a",{class:"up",href:"#__Methods"},"Up"),(0,l.kt)("pre",{class:"post"},(0,l.kt)("code",{class:"huge"},(0,l.kt)("span",{class:"http-method"},"post")," /users/createWithList"))),(0,l.kt)("div",{class:"method-summary"},"Creates list of users with given input array ( ",(0,l.kt)("span",{class:"nickname"},"createUsersWithListInput"),") "),(0,l.kt)("div",{class:"method-notes"}),(0,l.kt)("h3",{class:"field-label"},"Request body"),(0,l.kt)("div",{class:"field-items"},(0,l.kt)("div",{class:"param"},"body ",(0,l.kt)("a",{href:"#body_4"},"body_4")," (optional) "),(0,l.kt)("div",{class:"param-desc"},(0,l.kt)("span",{class:"param-type"},"Body Parameter")," \u2014 List of user object")),(0,l.kt)("h3",{class:"field-label"},"Produces")," This API call produces the following media types according to the ",(0,l.kt)("span",{class:"header"},"Accept")," request header; the media type will be conveyed by the ",(0,l.kt)("span",{class:"heaader"},"Content-Type")," response header. ",(0,l.kt)("ul",null,(0,l.kt)("li",{value:"1"},(0,l.kt)("code",null,"application/json")),(0,l.kt)("li",{value:"2"},(0,l.kt)("code",null,"application/xml"))),(0,l.kt)("h3",{class:"field-label"},"Responses"),(0,l.kt)("h4",{class:"field-label"},"default")," successful operation ",(0,l.kt)("a",{href:"#"})),(0,l.kt)("div",{class:"method"},(0,l.kt)("a",{name:"deleteUser"}),(0,l.kt)("div",{class:"method-path"},(0,l.kt)("a",{class:"up",href:"#__Methods"},"Up"),(0,l.kt)("pre",{class:"delete"},(0,l.kt)("code",{class:"huge"},(0,l.kt)("span",{class:"http-method"},"delete")," /users/username"))),(0,l.kt)("div",{class:"method-summary"},"Delete user ( ",(0,l.kt)("span",{class:"nickname"},"deleteUser"),") "),(0,l.kt)("div",{class:"method-notes"},"This can only be done by the logged in user."),(0,l.kt)("h3",{class:"field-label"},"Path parameters"),(0,l.kt)("div",{class:"field-items"},(0,l.kt)("div",{class:"param"},"username (required)"),(0,l.kt)("div",{class:"param-desc"},(0,l.kt)("span",{class:"param-type"},"Path Parameter")," \u2014 The name that needs to be deleted")),(0,l.kt)("h3",{class:"field-label"},"Produces")," This API call produces the following media types according to the ",(0,l.kt)("span",{class:"header"},"Accept")," request header; the media type will be conveyed by the ",(0,l.kt)("span",{class:"heaader"},"Content-Type")," response header. ",(0,l.kt)("ul",null,(0,l.kt)("li",{value:"1"},(0,l.kt)("code",null,"application/json")),(0,l.kt)("li",{value:"2"},(0,l.kt)("code",null,"application/xml"))),(0,l.kt)("h3",{class:"field-label"},"Responses"),(0,l.kt)("h4",{class:"field-label"},"400")," Invalid username supplied ",(0,l.kt)("a",{href:"#"}),(0,l.kt)("h4",{class:"field-label"},"404")," User not found ",(0,l.kt)("a",{href:"#"})),(0,l.kt)("hr",{color:"#dddddd",width:"100%",size:"0",align:"center"}),(0,l.kt)("div",{class:"method"},(0,l.kt)("a",{name:"getUserByName"}),(0,l.kt)("div",{class:"method-path"},(0,l.kt)("a",{class:"up",href:"#__Methods"},"Up"),(0,l.kt)("pre",{class:"get"},(0,l.kt)("code",{class:"huge"},(0,l.kt)("span",{class:"http-method"},"get")," /users/username"))),(0,l.kt)("div",{class:"method-summary"},"Get user by user name ( ",(0,l.kt)("span",{class:"nickname"},"getUserByName"),") "),(0,l.kt)("div",{class:"method-notes"}),(0,l.kt)("h3",{class:"field-label"},"Path parameters"),(0,l.kt)("div",{class:"field-items"},(0,l.kt)("div",{class:"param"},"username (required)"),(0,l.kt)("div",{class:"param-desc"},(0,l.kt)("span",{class:"param-type"},"Path Parameter")," \u2014 The name that needs to be fetched. Use user1 for testing.")),(0,l.kt)("h3",{class:"field-label"},"Return type"),(0,l.kt)("div",{class:"return-type"},(0,l.kt)("a",{href:"#body_4"},"body_4")),(0,l.kt)("h3",{class:"field-label"},"Produces")," This API call produces the following media types according to the ",(0,l.kt)("span",{class:"header"},"Accept")," request header; the media type will be conveyed by the ",(0,l.kt)("span",{class:"heaader"},"Content-Type")," response header. ",(0,l.kt)("ul",null,(0,l.kt)("li",{value:"1"},(0,l.kt)("code",null,"application/json")),(0,l.kt)("li",{value:"2"},(0,l.kt)("code",null,"application/xml"))),(0,l.kt)("h3",{class:"field-label"},"Responses"),(0,l.kt)("h4",{class:"field-label"},"200")," successful operation ",(0,l.kt)("a",{href:"#body_4"},"body_4"),(0,l.kt)("h4",{class:"field-label"},"400")," Invalid username supplied ",(0,l.kt)("a",{href:"#"}),(0,l.kt)("h4",{class:"field-label"},"404")," User not found ",(0,l.kt)("a",{href:"#"})),(0,l.kt)("hr",{color:"#dddddd",width:"100%",size:"0",align:"center"}),(0,l.kt)("div",{class:"method"},(0,l.kt)("a",{name:"loginUser"}),(0,l.kt)("div",{class:"method-path"},(0,l.kt)("a",{class:"up",href:"#__Methods"},"Up"),(0,l.kt)("pre",{class:"get"},(0,l.kt)("code",{class:"huge"},(0,l.kt)("span",{class:"http-method"},"get")," /users/login"))),(0,l.kt)("div",{class:"method-summary"},"Logs user into the system ( ",(0,l.kt)("span",{class:"nickname"},"loginUser"),") "),(0,l.kt)("div",{class:"method-notes"}),(0,l.kt)("h3",{class:"field-label"},"Query parameters"),(0,l.kt)("div",{class:"field-items"},(0,l.kt)("div",{class:"param"},"username (optional)"),(0,l.kt)("div",{class:"param-desc"},(0,l.kt)("span",{class:"param-type"},"Query Parameter")," \u2014 The user name for login"),(0,l.kt)("div",{class:"param"},"password (optional)"),(0,l.kt)("div",{class:"param-desc"},(0,l.kt)("span",{class:"param-type"},"Query Parameter")," \u2014 The password for login in clear text")),(0,l.kt)("h3",{class:"field-label"},"Return type"),(0,l.kt)("div",{class:"return-type"}," String "),(0,l.kt)("h3",{class:"field-label"},"Example data"),(0,l.kt)("div",{class:"example-data-content-type"},"Content-Type: application/json"),(0,l.kt)("pre",{class:"example"},(0,l.kt)("p",null,'"aeiou"')),(0,l.kt)("h3",{class:"field-label"},"Example data"),(0,l.kt)("div",{class:"example-data-content-type"},"Content-Type: application/xml"),(0,l.kt)("pre",{class:"example"},(0,l.kt)("p",null,"aeiou")),(0,l.kt)("h3",{class:"field-label"},"Produces")," This API call produces the following media types according to the ",(0,l.kt)("span",{class:"header"},"Accept")," request header; the media type will be conveyed by the ",(0,l.kt)("span",{class:"heaader"},"Content-Type")," response header. ",(0,l.kt)("ul",null,(0,l.kt)("li",{value:"1"},(0,l.kt)("code",null,"application/json")),(0,l.kt)("li",{value:"2"},(0,l.kt)("code",null,"application/xml"))),(0,l.kt)("h3",{class:"field-label"},"Responses"),(0,l.kt)("h4",{class:"field-label"},"200")," successful operation ",(0,l.kt)("a",{href:"#String"},"String"),(0,l.kt)("h4",{class:"field-label"},"400")," Invalid username/password supplied ",(0,l.kt)("a",{href:"#"})),(0,l.kt)("hr",{color:"#dddddd",width:"100%",size:"0",align:"center"}),(0,l.kt)("div",{class:"method"},(0,l.kt)("a",{name:"logoutUser"}),(0,l.kt)("div",{class:"method-path"},(0,l.kt)("a",{class:"up",href:"#__Methods"},"Up"),(0,l.kt)("pre",{class:"get"},(0,l.kt)("code",{class:"huge"},(0,l.kt)("span",{class:"http-method"},"get")," /users/logout"))),(0,l.kt)("div",{class:"method-summary"},"Logs out current logged in user session ( ",(0,l.kt)("span",{class:"nickname"},"logoutUser"),") "),(0,l.kt)("div",{class:"method-notes"}),(0,l.kt)("h3",{class:"field-label"},"Produces")," This API call produces the following media types according to the ",(0,l.kt)("span",{class:"header"},"Accept")," request header; the media type will be conveyed by the ",(0,l.kt)("span",{class:"heaader"},"Content-Type")," response header. ",(0,l.kt)("ul",null,(0,l.kt)("li",{value:"1"},(0,l.kt)("code",null,"application/json")),(0,l.kt)("li",{value:"2"},(0,l.kt)("code",null,"application/xml"))),(0,l.kt)("h3",{class:"field-label"},"Responses"),(0,l.kt)("h4",{class:"field-label"},"default")," successful operation ",(0,l.kt)("a",{href:"#"})),(0,l.kt)("hr",{color:"#dddddd",width:"100%",size:"0",align:"center"}),(0,l.kt)("div",{class:"method"},(0,l.kt)("a",{name:"updateUser"}),(0,l.kt)("div",{class:"method-path"},(0,l.kt)("a",{class:"up",href:"#__Methods"},"Up"),(0,l.kt)("pre",{class:"put"},(0,l.kt)("code",{class:"huge"},(0,l.kt)("span",{class:"http-method"},"put")," /users/username"))),(0,l.kt)("div",{class:"method-summary"},"Updated user ( ",(0,l.kt)("span",{class:"nickname"},"updateUser"),") "),(0,l.kt)("div",{class:"method-notes"},"This can only be done by the logged in user."),(0,l.kt)("h3",{class:"field-label"},"Path parameters"),(0,l.kt)("div",{class:"field-items"},(0,l.kt)("div",{class:"param"},"username (required)"),(0,l.kt)("div",{class:"param-desc"},(0,l.kt)("span",{class:"param-type"},"Path Parameter")," \u2014 name that need to be deleted")),(0,l.kt)("h3",{class:"field-label"},"Request body"),(0,l.kt)("div",{class:"field-items"},(0,l.kt)("div",{class:"param"},"body ",(0,l.kt)("a",{href:"#body_5"},"body_5")," (optional) "),(0,l.kt)("div",{class:"param-desc"},(0,l.kt)("span",{class:"param-type"},"Body Parameter")," \u2014 Updated user object")),(0,l.kt)("h3",{class:"field-label"},"Produces")," This API call produces the following media types according to the ",(0,l.kt)("span",{class:"header"},"Accept")," request header; the media type will be conveyed by the ",(0,l.kt)("span",{class:"heaader"},"Content-Type")," response header. ",(0,l.kt)("ul",null,(0,l.kt)("li",{value:"1"},(0,l.kt)("code",null,"application/json")),(0,l.kt)("li",{value:"2"},(0,l.kt)("code",null,"application/xml"))),(0,l.kt)("h3",{class:"field-label"},"Responses"),(0,l.kt)("h4",{class:"field-label"},"400")," Invalid user supplied ",(0,l.kt)("a",{href:"#"}),(0,l.kt)("h4",{class:"field-label"},"404")," User not found ",(0,l.kt)("a",{href:"#"})))}k.isMDXComponent=!0}}]);